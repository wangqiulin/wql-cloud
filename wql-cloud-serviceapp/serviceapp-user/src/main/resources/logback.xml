<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- ps:尽量别用绝对路径，如果带参数不同容器路径解释可能不同,以下配置参数在pom.xml里 -->
    <!-- 日志文件输出根目录 -->
    <property name="log.root" value="/application"/>
    <!-- 模块名称， 影响日志配置名，日志文件名 -->
    <property name="log.moduleName" value="serviceapp-user"/>
    <!-- 单日志文件大小 -->
    <property name="log.max.size" value="100MB"/>
    <!-- 日志文件输出目录 -->
    <property name="log.base" value="${log.root}/${log.moduleName}/logs"/>
    <!-- 日志压缩文件保存目录 -->
    <property name="log.archive.base" value="${log.root}/${log.moduleName}/logs/archive"/>
    <!-- 日志压缩文件保存目录 -->
    <property name="log.archive.format" value="yyyy-MM-dd"/>
    <!-- 日志输出格式 -->
    <property name="log.pattern" value="%X{traceId} %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{56}.%method:%L -%msg%n"/>

    <!--控制台输出appender -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
<!--             <charset>UTF-8</charset> -->
        </encoder>
    </appender>

    <!-- 日志文件输出appender -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${log.moduleName}.log</File><!-- 设置日志不超过${log.max.size}时的保存路径，注意如果是web项目会保存到Tomcat的bin目录 下 -->
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${log.archive.base}/${log.moduleName}_%d{yyyy-MM-dd}.%i.log.zip</FileNamePattern>
            <!-- 当天的日志大小 超过${log.max.size}时,压缩日志并保存 -->
            <maxFileSize>${log.max.size}</maxFileSize>
        </rollingPolicy>
        <!-- 日志输出的文件的格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${log.pattern}</pattern>
<!--             <charset>UTF-8</charset> -->
        </layout>
        <!-- 当前appender输出日志级别,该日志级别会覆盖logger,root上设置的日志级别 -->
       <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${log.project.level}</level>
        </filter>-->
    </appender>

    <!-- root将级别为“DEBUG”及大于“DEBUG”的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console -->
    <!-- sql打印 additivity=true 会向上传递,root中的appender可以享有此logger -->
    <Logger name="druid.sql.Statement" level="DEBUG" additivity="false">
        <appender-ref ref="stdout"/>
    </Logger>
    <root level="INFO">
        <!-- 标识这个appender将会添加到这个logger -->
        <appender-ref ref="stdout"/>
        <appender-ref ref="file"/>
    </root>
</configuration>  

